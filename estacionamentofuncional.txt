using System.Collections.Generic;
using System.Linq;
using System; // Adicionado explicitamente para garantir que Console.WriteLine funcione se ImplicitUsings falhar

namespace DesafioFundamentos.Models
{
    public class Estacionamento
    {
        private decimal precoInicial = 0;
        private decimal precoPorHora = 0;
        private List<string> veiculos = new List<string>();

        public Estacionamento(decimal precoInicial, decimal precoPorHora)
        {
            this.precoInicial = precoInicial;
            this.precoPorHora = precoPorHora;
        }

        public void AdicionarVeiculo()
        {
            Console.WriteLine("Digite a placa do veículo para estacionar:");
            string placa = Console.ReadLine().ToUpper();
            veiculos.Add(placa);
            Console.WriteLine($"Veículo com a placa {placa} estacionado com sucesso!");
        }

        public void RemoverVeiculo()
        {
            Console.WriteLine("Digite a placa do veículo para remover:");

            string placa = Console.ReadLine().ToUpper();

            if (veiculos.Any(x => x == placa))
            {
                Console.WriteLine("Digite a quantidade de horas que o veículo permaneceu estacionado:");

                // Tenta ler e validar as horas de permanência
                if (!int.TryParse(Console.ReadLine(), out int horas) || horas <= 0)
                {
                    Console.WriteLine("Valor de horas inválido. A cobrança requer um número positivo. Remoção cancelada.");
                    return; 
                }

                // Cálculo do Valor Total
                decimal valorTotal = precoInicial + (precoPorHora * horas); 

                // --- NOVO FLUXO: MOSTRAR VALOR E PEDIR CONFIRMAÇÃO ---
                Console.WriteLine($"O valor total a ser cobrado pelo período de {horas} hora(s) é de: R$ {valorTotal:F2}");
                Console.WriteLine("Deseja confirmar a remoção do veículo? (S/N)");
                
                string confirmacao = Console.ReadLine().ToUpper();

                if (confirmacao == "S")
                {
                    veiculos.Remove(placa); 
                    Console.WriteLine($"O veículo {placa} foi removido e o preço total foi de: R$ {valorTotal:F2}");
                }
                else
                {
                    Console.WriteLine($"Remoção do veículo {placa} cancelada. O veículo permanece estacionado.");
                }
                // ----------------------------------------------------
            }
            else
            {
                Console.WriteLine("Desculpe, esse veículo não está estacionado aqui. Confira se digitou a placa corretamente");
            }
        }

        public void ListarVeiculos()
        {
            if (veiculos.Any())
            {
                Console.WriteLine("Os veículos estacionados são:");
                
                int contador = 1;
                foreach (string veiculo in veiculos)
                {
                    Console.WriteLine($"{contador} - {veiculo}"); 
                    contador++;
                }
            }
            else
            {
                Console.WriteLine("Não há veículos estacionados.");
            }
        }
    }
}